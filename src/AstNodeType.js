const AstNodeType = Object.freeze({
  ArrayExpression: 'ArrayExpression',
  ArrayPattern: 'ArrayPattern',
  ArrowFunctionExpression: 'ArrowFunctionExpression',
  AssignmentExpression: 'AssignmentExpression',
  AssignmentOperator: 'AssignmentOperator',
  AssignmentPattern: 'AssignmentPattern',
  AssignmentProperty: 'AssignmentProperty',
  AwaitExpression: 'AwaitExpression',
  BigIntLiteral: 'BigIntLiteral',
  BinaryExpression: 'BinaryExpression',
  BinaryOperator: 'BinaryOperator',
  BindExpression: 'BindExpression',
  BlockStatement: 'BlockStatement',
  BlockStatementLike: 'BlockStatementLike',
  BodilessFunctionBase: 'BodilessFunctionBase',
  BodilessFunctionOrMethodBase: 'BodilessFunctionOrMethodBase',
  BooleanLiteral: 'BooleanLiteral',
  BreakStatement: 'BreakStatement',
  CallExpression: 'CallExpression',
  CallOrNewBase: 'CallOrNewBase',
  CatchClause: 'CatchClause',
  Class: 'Class',
  ClassBase: 'ClassBase',
  ClassBody: 'ClassBody',
  ClassDeclaration: 'ClassDeclaration',
  ClassExpression: 'ClassExpression',
  ClassMember: 'ClassMember',
  ClassMemberBase: 'ClassMemberBase',
  ClassMethod: 'ClassMethod',
  ClassMethodOrDeclareMethodCommon: 'ClassMethodOrDeclareMethodCommon',
  ClassPrivateProperty: 'ClassPrivateProperty',
  ClassProperty: 'ClassProperty',
  Comment: 'Comment',
  ComprehensionBlock: 'ComprehensionBlock',
  ComprehensionExpression: 'ComprehensionExpression',
  ConditionalExpression: 'ConditionalExpression',
  ContinueStatement: 'ContinueStatement',
  DebuggerStatement: 'DebuggerStatement',
  Declaration: 'Declaration',
  DeclarationBase: 'DeclarationBase',
  Decorator: 'Decorator',
  Directive: 'Directive',
  DirectiveLiteral: 'DirectiveLiteral',
  DoExpression: 'DoExpression',
  DoWhileStatement: 'DoWhileStatement',
  EmptyStatement: 'EmptyStatement',
  EstreeProperty: 'EstreeProperty',
  ExperimentalRestProperty: 'ExperimentalRestProperty',
  ExperimentalSpreadProperty: 'ExperimentalSpreadProperty',
  ExportAllDeclaration: 'ExportAllDeclaration',
  ExportDefaultDeclaration: 'ExportDefaultDeclaration',
  ExportDefaultSpecifier: 'ExportDefaultSpecifier',
  ExportNamedDeclaration: 'ExportNamedDeclaration',
  ExportNamespaceSpecifier: 'ExportNamespaceSpecifier',
  ExportSpecifier: 'ExportSpecifier',
  Expression: 'Expression',
  ExpressionStatement: 'ExpressionStatement',
  File: 'File',
  ForInOf: 'ForInOf',
  ForInOfBase: 'ForInOfBase',
  ForInStatement: 'ForInStatement',
  ForLike: 'ForLike',
  ForOfStatement: 'ForOfStatement',
  ForStatement: 'ForStatement',
  Function: 'Function',
  FunctionBase: 'FunctionBase',
  FunctionDeclaration: 'FunctionDeclaration',
  FunctionExpression: 'FunctionExpression',
  HasDecorators: 'HasDecorators',
  Identifier: 'Identifier',
  IfStatement: 'IfStatement',
  Import: 'Import',
  ImportDeclaration: 'ImportDeclaration',
  ImportDefaultSpecifier: 'ImportDefaultSpecifier',
  ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
  ImportSpecifier: 'ImportSpecifier',
  JSXAttribute: 'JSXAttribute',
  JSXClosingElement: 'JSXClosingElement',
  JSXElement: 'JSXElement',
  JSXEmptyExpression: 'JSXEmptyExpression',
  JSXExpressionContainer: 'JSXExpressionContainer',
  JSXIdentifier: 'JSXIdentifier',
  JSXMemberExpression: 'JSXMemberExpression',
  JSXNamespacedName: 'JSXNamespacedName',
  JSXOpeningElement: 'JSXOpeningElement',
  JSXSpreadChild: 'JSXSpreadChild',
  JSXSpreadAttribute: 'JSXSpreadAttribute',
  JSXText: 'JSXText',
  LabeledStatement: 'LabeledStatement',
  LetStatement: 'LetStatement',
  Literal: 'Literal',
  LogicalExpression: 'LogicalExpression',
  LogicalOperator: 'LogicalOperator',
  MemberExpression: 'MemberExpression',
  MetaProperty: 'MetaProperty',
  MethodBase: 'MethodBase',
  MethodDefinition: 'MethodDefinition',
  MethodKind: 'MethodKind',
  MethodLike: 'MethodLike',
  ModuleDeclaration: 'ModuleDeclaration',
  ModuleSpecifier: 'ModuleSpecifier',
  NewExpression: 'NewExpression',
  NormalFunction: 'NormalFunction',
  NullLiteral: 'NullLiteral',
  NumericLiteral: 'NumericLiteral',
  ObjectExpression: 'ObjectExpression',
  ObjectMember: 'ObjectMember',
  ObjectMemberBase: 'ObjectMemberBase',
  ObjectMethod: 'ObjectMethod',
  ObjectOrClassMember: 'ObjectOrClassMember',
  ObjectPattern: 'ObjectPattern',
  ObjectProperty: 'ObjectProperty',
  OptClassDeclaration: 'OptClassDeclaration',
  OptFunctionDeclaration: 'OptFunctionDeclaration',
  OptTSDeclareFunction: 'OptTSDeclareFunction',
  Pattern: 'Pattern',
  PatternBase: 'PatternBase',
  PrivateName: 'PrivateName',
  Program: 'Program',
  Property: 'Property',
  RegExpLiteral: 'RegExpLiteral',
  RestElement: 'RestElement',
  ReturnStatement: 'ReturnStatement',
  SequenceExpression: 'SequenceExpression',
  SpreadElement: 'SpreadElement',
  Statement: 'Statement',
  StringLiteral: 'StringLiteral',
  Super: 'Super',
  SwitchCase: 'SwitchCase',
  SwitchStatement: 'SwitchStatement',
  TaggedTemplateExpression: 'TaggedTemplateExpression',
  TaggedTmplateExpression: 'TaggedTmplateExpression',
  TemplateElement: 'TemplateElement',
  TemplateLiteral: 'TemplateLiteral',
  ThisExpression: 'ThisExpression',
  ThrowStatement: 'ThrowStatement',
  TryStatement: 'TryStatement',
  TypeAnnotation: 'TypeAnnotation',
  TypeCastExpression: 'TypeCastExpression',
  TypeParameter: 'TypeParameter',
  TypeParameterDeclaration: 'TypeParameterDeclaration',
  TypeParameterInstantiation: 'TypeParameterInstantiation',
  UnaryExpression: 'UnaryExpression',
  UnaryOperator: 'UnaryOperator',
  UpdateExpression: 'UpdateExpression',
  UpdateOperator: 'UpdateOperator',
  VariableDeclaration: 'VariableDeclaration',
  VariableDeclarator: 'VariableDeclarator',
  WhileStatement: 'WhileStatement',
  WithStatement: 'WithStatement',
  YieldExpression: 'YieldExpression',

  // typescript
  TSDeclareFunction: 'TSDeclareFunction',
  TSDeclareMethod: 'TSDeclareMethod',
  TSInterfaceBody: 'TSInterfaceBody',
  TSParameterProperty: 'TSParameterProperty',
  TsArrayType: 'TsArrayType',
  TsAsExpression: 'TsAsExpression',
  TsCallSignatureDeclaration: 'TsCallSignatureDeclaration',
  TsConstructSignatureDeclaration: 'TsConstructSignatureDeclaration',
  TsConstructorType: 'TsConstructorType',
  TsEntityName: 'TsEntityName',
  TsEnumDeclaration: 'TsEnumDeclaration',
  TsEnumMember: 'TsEnumMember',
  TsExportAssignment: 'TsExportAssignment',
  TsExpressionWithTypeArguments: 'TsExpressionWithTypeArguments',
  TsExternalModuleReference: 'TsExternalModuleReference',
  TsFunctionOrConstructorType: 'TsFunctionOrConstructorType',
  TsFunctionType: 'TsFunctionType',
  TsImportEqualsDeclaration: 'TsImportEqualsDeclaration',
  TsIndexSignature: 'TsIndexSignature',
  TsIndexedAccessType: 'TsIndexedAccessType',
  TsInterfaceDeclaration: 'TsInterfaceDeclaration',
  TsIntersectionType: 'TsIntersectionType',
  TsKeywordType: 'TsKeywordType',
  TsKeywordTypeType: 'TsKeywordTypeType',
  TsLiteralType: 'TsLiteralType',
  TsMappedType: 'TsMappedType',
  TsMethodSignature: 'TsMethodSignature',
  TsModuleBlock: 'TsModuleBlock',
  TsModuleDeclaration: 'TsModuleDeclaration',
  TsModuleName: 'TsModuleName',
  TsModuleReference: 'TsModuleReference',
  TsNamedTypeElementBase: 'TsNamedTypeElementBase',
  TsNamespaceBody: 'TsNamespaceBody',
  TsNamespaceDeclaration: 'TsNamespaceDeclaration',
  TsNamespaceExportDeclaration: 'TsNamespaceExportDeclaration',
  TsNonNullExpression: 'TsNonNullExpression',
  TsParenthesizedType: 'TsParenthesizedType',
  TsPropertySignature: 'TsPropertySignature',
  TsQualifiedName: 'TsQualifiedName',
  TsSignatureDeclaration: 'TsSignatureDeclaration',
  TsSignatureDeclarationBase: 'TsSignatureDeclarationBase',
  TsSignatureDeclarationOrIndexSignatureBase: 'TsSignatureDeclarationOrIndexSignatureBase',
  TsThisType: 'TsThisType',
  TsTupleType: 'TsTupleType',
  TsType: 'TsType',
  TsTypeAliasDeclaration: 'TsTypeAliasDeclaration',
  TsTypeAssertion: 'TsTypeAssertion',
  TsTypeAssertionLikeBase: 'TsTypeAssertionLikeBase',
  TsTypeBase: 'TsTypeBase',
  TsTypeElement: 'TsTypeElement',
  TsTypeLiteral: 'TsTypeLiteral',
  TsTypeOperator: 'TsTypeOperator',
  TsTypePredicate: 'TsTypePredicate',
  TsTypeQuery: 'TsTypeQuery',
  TsTypeReference: 'TsTypeReference',
  TsUnionOrIntersectionType: 'TsUnionOrIntersectionType',
  TsUnionOrIntersectionTypeBase: 'TsUnionOrIntersectionTypeBase',
  TsUnionType: 'TsUnionType',

  // flow
  FlowClassImplements: 'FlowClassImplements',
  FlowDeclare: 'FlowDeclare',
  FlowDeclareClass: 'FlowDeclareClass',
  FlowDeclareExportDeclaration: 'FlowDeclareExportDeclaration',
  FlowDeclareFunction: 'FlowDeclareFunction',
  FlowDeclareInterface: 'FlowDeclareInterface',
  FlowDeclareModule: 'FlowDeclareModule',
  FlowDeclareModuleExports: 'FlowDeclareModuleExports',
  FlowDeclareTypeAlias: 'FlowDeclareTypeAlias',
  FlowDeclareVariable: 'FlowDeclareVariable',
  FlowFunctionTypeAnnotation: 'FlowFunctionTypeAnnotation',
  FlowFunctionTypeParam: 'FlowFunctionTypeParam',
  FlowGenericTypeAnnotation: 'FlowGenericTypeAnnotation',
  FlowInterface: 'FlowInterface',
  FlowInterfaceExtends: 'FlowInterfaceExtends',
  FlowObjectTypeAnnotation: 'FlowObjectTypeAnnotation',
  FlowObjectTypeCallProperty: 'FlowObjectTypeCallProperty',
  FlowObjectTypeIndexer: 'FlowObjectTypeIndexer',
  FlowObjectTypeProperty: 'FlowObjectTypeProperty',
  FlowObjectTypeSpreadProperty: 'FlowObjectTypeSpreadProperty',
  FlowPredicate: 'FlowPredicate',
  FlowQualifiedTypeIdentifier: 'FlowQualifiedTypeIdentifier',
  FlowTupleTypeAnnotation: 'FlowTupleTypeAnnotation',
  FlowType: 'FlowType',
  FlowTypeAlias: 'FlowTypeAlias',
  FlowTypeAnnotation: 'FlowTypeAnnotation',
  FlowTypeofTypeAnnotation: 'FlowTypeofTypeAnnotation',
  FlowVariance: 'FlowVariance'
});

module.exports = AstNodeType;
